version: '3.8'

services:
  # сервис основного приложения
  app:
    build: .
    container_name: ${APP_CONTAINER_NAME}
    env_file:
      - .env
    volumes:
      - ./src:/src
      - ./logs:/logs
      - ./docs:/docs
    working_dir: /src/
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "${HTTP_PORT:-8000}:8000"
    networks:
      - project-network
    links:
      - db
    depends_on:
      - db

  # база данных
  db:
    image: postgres:15-alpine
    container_name: ${POSTGRES_CONTAINER_NAME}
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    networks:
      - project-network

  # СУБД Redis (кэширование и брокер сообщений для Celery)
  redis:
    image: redis:7-alpine
    container_name: ${REDIS_CONTAINER_NAME}
    environment:
      - REDIS_CONFIG=vm-overcommit-memory yes
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    restart: on-failure
    networks:
      - project-network

  # сервис распределенной очереди задач Celery
  celery:
    build: .
    container_name: ${CELERY_CONTAINER_NAME}
    command: celery -A core worker --loglevel=info
    volumes:
      - ./src:/src
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_healthy
    restart: on-failure
    networks:
      - project-network

  # сервис для выполнения периодических заданий Celery Beat
  celery-beat:
    build: .
    container_name: ${CELERY_BEAT_CONTAINER_NAME}
    command: celery -A core beat -l info -S django --pidfile=/tmp/celerybeat.pid --schedule=/tmp/celerybeat-schedule
    volumes:
      - ./src:/src
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_healthy
      celery:
        condition: service_started
    tmpfs: /tmp
    restart: on-failure
    networks:
      - project-network

  # мониторинг периодических задач Flower
  flower:
    image: mher/flower:0.9.7
    container_name: ${FLOWER_CONTAINER_NAME}
    command: [ "flower", "--broker=redis://redis:6379", "--port=5555" ]
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    depends_on:
      redis:
        condition: service_started
    restart: on-failure
    networks:
      - project-network


  pgadmin:
    image: dpage/pgadmin4
    container_name: ${PGADMIN_CONTAINER_NAME}
    restart: always
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - project-network


networks:
  project-network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin-data:
